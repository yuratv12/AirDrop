import random
import smtplib
import email.message
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import pandas as pd
import logging
import config, database, menu
from datetime import datetime, timedelta

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(config.token)
dp = Dispatcher(bot, storage=MemoryStorage())
#–í—ã–≤–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

class User_wallet_state(StatesGroup):
    #–ö–ª–∞—Å—Å –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞
    # –≤–æ–ø—Ä–æ—Å—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–ª—å–∑—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∞–º–∏
    user_wallet = State()

class Admin_sender(StatesGroup):
    #–ö–ª–∞—Å—Å –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞
    # –≤–æ–ø—Ä–æ—Å—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–ª—å–∑—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∞–º–∏
    text_send = State()


@dp.message_handler(commands="start")
async def start_command(message: types.Message):
    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "—Å—Ç–∞—Ä—Ç"
    #–ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = message.from_user.id
    user_nickname = message.from_user.username
    message_data = message.text
    refer = str(message_data[6:]).strip()
    if refer:
        if str(refer) != str(user_id):
            if not database.old_refer(user_id, refer):
                database.add_coin_to_balance(refer, '0.025')
                database.add_refer(user_id, refer)
                database.update_count_refer(refer)
                await bot.send_message(refer, 'üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –¥—Ä—É–≥!')

    if not database.old_user(user_id):
        message_text = """* üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.
üçÄ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ NFT ¬´Cozy Monkey World¬ª, —Å–æ–±–µ—Ä—ã –≤—Å–µ 4 –±–∞–Ω–∞–Ω–∞ –∏ –ø–æ–ª—É—á–∏ –æ–¥–Ω—É nft –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏!

‚ùï –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ Metamask –∏–ª–∏ TrustWallet (BEP-20)*!
    """
        database.insert_new_user(user_id, user_nickname, str(datetime.now().date()))
        await User_wallet_state.user_wallet.set()
    else:
        message_text = 'üí© –£ —Ç–µ–±—è –µ—Å—Ç—å –∫—Ä—É—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∏, –Ω–µ –ø–∏—à–∏ —Ä—É—á–∫–∞–º–∏!'

    await message.answer(message_text, parse_mode='Markdown')

@dp.message_handler(commands="chatid")
async def get_chat_id(message: types.Message):
    chat_id = message.chat.id
    await message.answer(chat_id)


@dp.message_handler(state=User_wallet_state.user_wallet)
async def get_user_wallet_data(message: types.Message, state: FSMContext):
    #–ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.chat.id
    wallet = message.text
    if '0x' in str(wallet):
        database.add_user_wallet(user_id, wallet)
        await state.finish()
        message_text = """*üíæ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! *
{0}

1‚É£ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!
üëâ [–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É](https://t.me/nft_monkey_price)

*–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–î–∞–ª–µ–µ¬ª!*""".format(wallet)
        await message.answer(message_text, parse_mode='Markdown', reply_markup=menu.next_button)
    else:
        message_text = '<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –≤ —Å–µ—Ç–∏ BEP-20</b>\n\
–ü—Ä–∏–º–µ—Ä: 0x0A0A00BC01AA0123456B65555AB01A0EC012A01A\n\
*–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Metamask –∏–ª–∏ TrustWallet'
        await message.answer(message_text, parse_mode='html')
        await User_wallet_state.user_wallet.set()


@dp.message_handler(lambda message: message.text == "–î–∞–ª–µ–µ")
async def check_user_in_chat(message: types.Message):
    user_id = message.chat.id
    result = await bot.get_chat_member('@nft_monkey_price', user_id)
    print(result.status)
    if str(result.status) != 'left':
        message_text = """üêµ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ nft –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–æ–Ω—É—Å"
üíé –û—Ç–ª–∏—á–Ω–æ! 

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.
"""
        database.add_coin_to_balance(user_id, '0.02')
        await message.answer(message_text, parse_mode='Markdown', reply_markup=menu.home_menu)
    else:
        message_text = """‚ùå –ü–æ—Ö–æ–∂–µ, –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.

üëâ [–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É](https://t.me/nft_monkey_price)

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–î–∞–ª–µ–µ¬ª!
"""
        await message.answer(message_text, parse_mode='Markdown')


@dp.message_handler(lambda message: message.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def get_refer_data(message: types.Message):
    user_id = message.chat.id
    count_refer = database.get_count_refer_by_user(user_id)
    message_text = """üí™ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <b>{0}</b> –¥—Ä—É–∑–µ–π 

üçÄ <b>–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ NFT:
üíì 30 –¥—Ä—É–∑–µ–π = 1 Monkey NFT</b> (~30$)
üíì <b>100 –¥—Ä—É–∑–µ–π = 1 Uncommon Monkey NFT</b> (~150$)

<b>–í–∞—à–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
https://t.me/monkeynft_bot?start={1}<code>
https://t.me/monkeynft_bot?start={1}
</code>
*–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å

<b>üíé –ó–∞ –∫–∞–∂–¥—ã—Ö 10 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π +1 nft. –í—ã–≤–æ–¥ NFT –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–∞</b>
""".format(count_refer, user_id)
    await message.answer(message_text, parse_mode='html')


@dp.message_handler(lambda message: message.text == "üéÅ –ë–æ–Ω—É—Å")
async def add_gift_user(message: types.Message):
    user_id = message.chat.id
    date_now = datetime.strftime(datetime.now(), "%Y-%m-%d %H:%M:%S")
    last_user_gift = database.get_last_gift(user_id)
    diff = datetime.strptime(date_now, "%Y-%m-%d %H:%M:%S") - datetime.strptime(last_user_gift, "%Y-%m-%d %H:%M:%S")
    diff_hours = int(diff.total_seconds() / 3600)
    user_balance = database.get_user_balance(user_id)
    print(diff_hours)

    count_ref = database.get_count_refer_by_user(user_id)
    get_nft_hist = database.get_nft_hist(user_id)
    print(count_ref)
    print(count_ref % 10)
    if count_ref > 0 and int(count_ref) % 10 == 0 and get_nft_hist > 0 and get_nft_hist != count_ref and int(diff_hours) > 24:
        message_text = """üíé –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ 1 NFT
üí£ NFT –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞ –∫–∞–∂–¥–æ–≥–æ 10 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
        """
        database.add_user_nft(user_id)
        database.add_info_nft_hist(user_id, count_ref)
        database.add_user_to_bonus(user_id, 0.001)
    elif int(diff_hours) > 9500:
        message_text = """üíé –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ 1 NFT
üí£ NFT –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞ –∫–∞–∂–¥–æ–≥–æ 10 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
        """
        database.add_user_to_bonus(user_id, 0.001)
        database.add_info_nft_hist(user_id, count_ref)
        database.add_user_nft(user_id)
    else:
        count_get = count_ref % 10
        if count_get == 0:
            count_get = 10
        else:
            count_get = 10 - count_get
        message_text = """‚ùóÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞ - –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ {0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.. 
*üíé –í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {1} NFT*
""".format(count_get, user_balance)
    await message.answer(message_text, parse_mode='Markdown')


@dp.message_handler(lambda message: message.text == "üåè –ö–∞–Ω–∞–ª-–ø—Ä–æ–º–æ—É—Ç–µ—Ä")
async def promo_channel(message: types.Message):
    user_id = message.chat.id
    promo = open('promo_4.jpg', 'rb')
    await bot.send_photo(user_id, promo,
                         caption='*–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è üëâ* [NFT / Monkey World  - Channel](https://t.me/nft_monkey_price)',
                         parse_mode='Markdown')
    await message.answer('*üëÄ –ü—Ä–æ—Å—å–±–∞ –Ω–µ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥—Ä–æ–ø–∞!*', parse_mode='Markdown')
    promo.close()


@dp.message_handler(lambda message: message.text == "üåé –ù–∞—à —á–∞—Ç")
async def promo_chat(message: types.Message):
    user_id = message.chat.id
    promo = open('promo_4.jpg', 'rb')
    await bot.send_photo(user_id, promo,
                         caption='*–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è üëâ *[NFT / Monkey World & NFT  - Chat](https://t.me/nft_world_monkey_chat)',
                         parse_mode='Markdown')
    await message.answer('*üëÄ –ü—Ä–æ—Å—å–±–∞ –Ω–µ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥—Ä–æ–ø–∞!*', parse_mode='Markdown')
    promo.close()

@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about(message: types.Message):
    user_id = message.chat.id
    message_caption = """*NFT-–∫–æ–ª–ª–µ–∫—Ü–∏—è [¬´Monkey¬ª](https://opensea.io/collection/untitled-collection-79534375)* - —ç—Ç–æ 1000 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö,  –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å —Ä–∞–∑–ª–∏—á–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç—å—é. 
*60%* - Common
*30%* - Uncommon
*7%* - Rare
*3%* - Legendary
*–í –±—É–¥—É—â–µ–º NFT* –≤–æ–∑–º–æ–∂–Ω–æ *–±—É–¥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ!*"""

    message_text = """<b>üåè <a href=\"https://t.me/nft_monkey_price/\">NFT / Monkey World</a></b> - —ç—Ç–æ  –°–ù–ì-–ø—Ä–æ–º–æ—É—Ç–µ—Ä airdrop\'–æ–≤! 
<b>–í—ã–¥–µ–ª–µ–Ω–æ: 500 $Epic NFT </b>

*NFT  –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –∑–∞ –¥–µ–Ω—å, –≤ –ø–æ—Ä—è–¥–∫–µ –∂–∏–≤–æ–π –æ—á–µ—Ä–µ–¥–∏ , 
NFT –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—Ä–æ–ø–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏!"""

    promo = open('promo_5.jpg', 'rb')
    await bot.send_photo(user_id, promo,
                         caption=message_caption,
                         parse_mode='Markdown')
    await message.answer(message_text, parse_mode='html')
    promo.close()


@dp.message_handler(lambda message: message.text == "üí∏ –í—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤")
async def get_token(message: types.Message):
    user_id = message.chat.id
    user_balance = database.get_user_balance(user_id)
    if float(user_balance) < 1:
        message_text = """‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!
üíé –í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å - {0} NFT 
üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 1 NFT""".format(user_balance)
    else:
        temp_email_msg = """<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b></br></br>
UserID: {0}</br>
UserName: @{1}</br>
Summ: {2}</br>
Date created: {3}""".format(user_id, message.chat.username, user_balance, datetime.now())
        print('ok')
        msg = email.message.Message()
        print('ok')
        msg['Subject'] = '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤'
        msg['From'] = 'dev@t-team.top'
        msg['To'] = 'wot.bl1999@gmail.com'
        password = "irifeg84"
        msg.add_header('Content-Type', 'text/html')
        print('ok 1')
        msg.set_payload(temp_email_msg)
        # Server
        print('ok 2')
        s = smtplib.SMTP(host='mail.t-team.top', port=25)
        s.starttls()
        print('ok 3')
        # Login Credentials for sending the mail
        s.login(msg['From'], password)
        s.sendmail(msg['From'], [msg['To']], msg.as_string().encode('utf-8'))
        print('ok 4')
        database.user_balance_to_null(user_id)
        message_text = """–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"""
    await message.answer(message_text)


@dp.message_handler(lambda message: message.text == "go-ap")
async def gotoadmin(message: types.Message):
    user_id = message.chat.id
    status = database.get_user_status(user_id)
    print(status)
    if status == 'admin':
        await message.answer('–í—ã –≤ –ø–∞–Ω–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', reply_markup=menu.admin_menu)


@dp.message_handler(lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def gotoadmin(message: types.Message):
    user_id = message.chat.id
    status = database.get_user_status(user_id)
    print(status)
    if status == 'admin':
        count_user = database.select_count_user()
        count_refer = database.select_count_refer()
        sum_balanse = database.get_all_sum_balanse()
        message_statistics = """*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
–ü–æ–¥–ø–∏—Å–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {0}
–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {1}
–°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª–∞–Ω—Å: {2}
        """.format(count_user, count_refer, sum_balanse)
        await message.answer(message_statistics, parse_mode='Markdown')


@dp.message_handler(lambda message: message.text == "–¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º")
async def gotoadmin(message: types.Message):
    user_id = message.chat.id
    status = database.get_user_status(user_id)
    print(status)
    if status == 'admin':
        msg_text = '<b>–¢–æ–ø 10 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º</b>\n\n'
        top_list = []
        select_top_ref = database.select_top_refer()
        index = 0
        for user in select_top_ref:
            user_chat = user[0]
            user_un = user[1]
            count_r = user[2]

            add_list = [user_chat, user_un, count_r]
            add_msg = 'id: {0} | {1} - {2} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö\n'.format(user_chat, user_un, count_r)
            if index < 10:
                msg_text += add_msg

            top_list.append(add_list)
        await message.answer(str(msg_text), parse_mode='html')

        df = pd.DataFrame(top_list)
        df.to_excel('list.xlsx')
        with open('list.xlsx', 'rb') as doc:
            await bot.send_document(user_id, doc, caption='–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫')


@dp.message_handler(lambda message: message.text == "–†–∞—Å—Å—ã–ª–∫–∞")
async def gotoadmin(message: types.Message):
    user_id = message.chat.id
    status = database.get_user_status(user_id)
    print(status)
    if status == 'admin':
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')

@dp.message_handler(content_types=['photo'])
async def handle_docs_photo(message):
    user_id = message.chat.id
    status = database.get_user_status(user_id)
    print(status)
    if status == 'admin':
        await message.photo[-1].download('test.jpg')
        await message.answer('–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ')
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:')
        await Admin_sender.text_send.set()

@dp.message_handler(state=Admin_sender.text_send)
async def get_user_wallet_data(message: types.Message, state: FSMContext):
    sender_text = message.text
    await state.finish()
    user_list = database.get_all_chat_id()
    for chat in user_list:
        with open('test.jpg', 'rb+') as ph:
            await bot.send_photo(chat, ph, caption=sender_text)


@dp.message_handler(lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def homemenu(message: types.Message):
    await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=menu.home_menu)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)